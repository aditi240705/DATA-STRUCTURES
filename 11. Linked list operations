#include <stdio.h>
#include <stdbool.h>

#define MAX_SIZE 100

// Structure to represent a stack
struct Stack {
    int array[MAX_SIZE];
    int top;
};

// Function to initialize the stack
void initialize(struct Stack* stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
bool isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
bool isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, int element) {
    if (isFull(stack)) {
        printf("Stack overflow. Cannot push element %d.\n", element);
        return;
    }
    stack->array[++stack->top] = element;
    printf("Element %d pushed to stack.\n", element);
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow. Cannot pop from empty stack.\n");
        return -1;
    }
    return stack->array[stack->top--];
}

// Function to peek the top element of the stack
int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. Cannot peek.\n");
        return -1;
    }
    return stack->array[stack->top];
}

int main() {
    struct Stack stack;
    initialize(&stack);

    // Push elements onto the stack
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);

    // Peek and pop elements from the stack
    printf("Top element of stack: %d\n", peek(&stack));
    printf("Popped element: %d\n", pop(&stack));
    printf("Top element of stack after pop: %d\n", peek(&stack));

    return 0;
}
