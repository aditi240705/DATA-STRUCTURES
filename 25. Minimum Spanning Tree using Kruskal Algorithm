#include <stdio.h>
#include <stdlib.h>

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent;
    int rank;
};

// Function prototypes
int find(struct Subset subsets[], int i);
void Union(struct Subset subsets[], int x, int y);
int compareEdges(const void* a, const void* b);
void KruskalMST(struct Edge edges[], int numVertices, int numEdges);

int main() {
    int numVertices = 4; // Example number of vertices
    int numEdges = 5; // Example number of edges

    struct Edge edges[] = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    KruskalMST(edges, numVertices, numEdges);

    return 0;
}

// Find set of an element i (uses path compression technique)
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i) {
        subsets[i].parent = find(subsets, subsets[i].parent); // Path compression
    }
    return subsets[i].parent;
}

// Union of two sets of x and y (uses union by rank)
void Union(struct Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    // Attach smaller rank tree under root of high rank tree (Union by Rank)
    if (subsets[xroot].rank < subsets[yroot].rank) {
        subsets[xroot].parent = yroot;
    } else if (subsets[xroot].rank > subsets[yroot].rank) {
        subsets[yroot].parent = xroot;
    } else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Compare function used by qsort to sort edges based on weight
int compareEdges(const void* a, const void* b) {
    struct Edge* edge1 = (struct Edge*)a;
    struct Edge* edge2 = (struct Edge*)b;
    return edge1->weight - edge2->weight;
}

// Function to find Minimum Spanning Tree using Kruskal's algorithm
void KruskalMST(struct Edge edges[], int numVertices, int numEdges) {
    struct Edge resultMST[numVertices]; // Array to store the result of MST
    int e = 0; // Index variable for resultMST
    int i = 0; // Index variable for sorted edges array

    // Step 1: Sort all the edges in non-decreasing order of their weight
    qsort(edges, numEdges, sizeof(edges[0]), compareEdges);

    // Allocate memory for creating numVertices subsets
    struct Subset subsets[numVertices];

    // Initialize each subset as a single element set with rank 0
    for (int v = 0; v < numVertices; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Number of edges to be taken is equal to numVertices-1
    while (e < numVertices - 1 && i < numEdges) {
        // Step 2: Pick the smallest edge and increment the index for the next iteration
        struct Edge nextEdge = edges[i++];

        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        // If including this edge does not cause cycle, include it in resultMST and increment the index of resultMST
        if (x != y) {
            resultMST[e++] = nextEdge;
            Union(subsets, x, y);
        }
    }

    // Print the edges of resultMST to construct the Minimum Spanning Tree
    printf("Edges of Minimum Spanning Tree:\n");
    for (i = 0; i < e; i++) {
        printf("%d -- %d == %d\n", resultMST[i].src, resultMST[i].dest, resultMST[i].weight);
    }
}
