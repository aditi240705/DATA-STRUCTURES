#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Structure to represent a node in the adjacency list
struct ListNode {
    int dest;
    struct ListNode* next;
};

// Structure to represent an adjacency list
struct AdjList {
    struct ListNode* head;
};

// Structure to represent a graph
struct Graph {
    int numVertices;
    struct AdjList* array;
};

// Function prototypes
struct ListNode* createListNode(int dest);
struct Graph* createGraph(int numVertices);
void addEdge(struct Graph* graph, int src, int dest);
void DFS(struct Graph* graph, int startVertex, int visited[]);

int main() {
    int numVertices = 5; // Example number of vertices

    // Create a graph
    struct Graph* graph = createGraph(numVertices);

    // Add edges to the graph
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);

    printf("Depth First Traversal (starting from vertex 0):\n");
    int visited[MAX_VERTICES] = {0}; // Initialize visited array with zeros
    DFS(graph, 0, visited);

    return 0;
}

// Function to create a new graph node with the given destination
struct ListNode* createListNode(int dest) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with the given number of vertices
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;

    // Create an array of adjacency lists. Size of the array will be numVertices.
    graph->array = (struct AdjList*)malloc(numVertices * sizeof(struct AdjList));

    // Initialize each adjacency list as empty by making head as NULL
    for (int i = 0; i < numVertices; ++i) {
        graph->array[i].head = NULL;
    }

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    struct ListNode* newNode = createListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since the graph is undirected, add an edge from dest to src also
    newNode = createListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Depth First Traversal of the vertices reachable from the given vertex
void DFS(struct Graph* graph, int startVertex, int visited[]) {
    // Mark the current node as visited and print it
    visited[startVertex] = 1;
    printf("%d ", startVertex);

    // Recur for all the vertices adjacent to this vertex
    struct ListNode* temp = graph->array[startVertex].head;
    while (temp) {
        int adjVertex = temp->dest;
        if (!visited[adjVertex]) {
            DFS(graph, adjVertex, visited);
        }
        temp = temp->next;
    }
}
